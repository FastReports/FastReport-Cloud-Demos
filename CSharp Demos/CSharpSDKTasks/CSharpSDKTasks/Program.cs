using FastReport.Cloud;
using FastReport.Cloud.Client;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;

namespace CSharpSDKTasks
{
    class Program
    {
        public static byte[] TEXT_FRX = Convert.FromBase64String("");
        private const string ApiKey = "PUT YOUR API KEY HERE";

        static async System.Threading.Tasks.Task Main(string[] args)
        {
            var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri("https://fastreport.cloud");
            httpClient.DefaultRequestHeaders.Authorization = new FastReportCloudApiKeyHeader(ApiKey);
            var subscriptions = new SubscriptionsClient(httpClient);
            var userSettingsClient = new UserSettingsClient(httpClient);

            var userSettings = await userSettingsClient.GetCurrentUserSettingsAsync();

            var subscriptionId = userSettings.DefaultSubscription;

            TasksClient tasksClient = new TasksClient(httpClient);

            var templateClient = new TemplatesClient(httpClient);
            var templateFolderClient = new TemplateFoldersClient(httpClient);

            var template = await templateClient.UploadFileV2Async((await templateFolderClient.GetRootFolderAsync(subscriptionId)).Id,
                fileContent: new FileParameter(new MemoryStream(TEXT_FRX), "testFile.frx"));

            var reportFolderClient = new ReportFoldersClient(httpClient);

            var exportFolderClient = new ExportFoldersClient(httpClient);

            // Create a new task
            var currentTask = await tasksClient.CreateTaskAsync(new CreatePrepareTemplateTaskVM
            {
                SubscriptionId = subscriptionId,
                Name = "My first task",
                InputFile = new InputFileVM
                {
                    EntityId = template.Id
                },
                OutputFile = new OutputFileVM
                {
                    FileName = "My first task generated file.fpx",
                    FolderId = (await reportFolderClient.GetRootFolderAsync(subscriptionId)).Id,
                },
                Exports = new List<CreateExportReportTaskVM>()
                {
                    new CreateExportReportTaskVM
                    {
                        SubscriptionId = subscriptionId,
                        Name = "ExportReportTask",
                        Format = ExportFormat.Pdf,
                        OutputFile = new OutputFileVM
                        {
                                FileName = "pdfFromFpxFromFrx.pdf",
                            FolderId = (await exportFolderClient.GetRootFolderAsync()).Id
                        }
                    }
                }
            });

            // Run last task
            await tasksClient.RunTaskByIdAsync(currentTask.Id);
            await tasksClient.DeleteTaskAsync(currentTask.Id);
        }
    }
}
